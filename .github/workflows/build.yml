name: Build TaskApp

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: macos-latest

    strategy:
      matrix:
        include:
          - platform: iOS
            sdk: iphonesimulator
            destination: "platform=iOS Simulator,OS=26.0.1,name=iPhone 17"
            artifact-name: ios-build
          - platform: macOS
            sdk: macosx
            destination: "platform=macOS"
            artifact-name: macos-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Show available SDKs
        run: xcodebuild -showsdks

      - name: Build for ${{ matrix.platform }}
        run: |
          xcodebuild clean build \
            -project TaskApp.xcodeproj \
            -scheme TaskApp \
            -sdk ${{ matrix.sdk }} \
            -destination '${{ matrix.destination }}' \
            -derivedDataPath ./DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Find and list build products
        if: success()
        run: |
          echo "=== ${{ matrix.platform }} Build products ==="
          find ./DerivedData -name "*.app" -type d
          ls -R ./DerivedData/Build/Products/

      - name: Archive build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ./DerivedData/Build/Products/**/*.app

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download iOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: ./artifacts/ios

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./artifacts/macos
 
      - name: Prepare release artifacts
        run: |
          echo "Zipping iOS artifacts..."
          if [ -d ./artifacts/ios ]; then
            (cd ./artifacts/ios && zip -r ../ios-build.zip .) || true
          else
            echo "No iOS artifacts found at ./artifacts/ios"
          fi

          echo "Zipping macOS artifacts..."
          if [ -d ./artifacts/macos ]; then
            (cd ./artifacts/macos && zip -r ../macos-build.zip .) || true
          else
            echo "No macOS artifacts found at ./artifacts/macos"
          fi

      - name: Get version from commit
        id: version
        run: |
          VERSION="v1.0.$(git rev-list --count HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Get latest changes
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          else
            CHANGES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)")
          fi
          echo "$CHANGES" > changes.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: changes.txt
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release created
        run: |
          echo "âœ… Release ${{ steps.version.outputs.version }} created successfully!"
